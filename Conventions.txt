Commiting:

Branch strategy: GitFlow

First you write the commit title, line jump, and then you put a message to explain why you did the commit. Like in the next example:
Configurating jest to be able to run ECMAScript modules.
By default, jest cannot run ECMAScript modules, this causes troubles when you have imports and exports in your code. With this configuration we can run our tests without having to transpile it with Babel

When commiting a bugfix, prepend the commit message with this: [Bugfix]: *Your commit message*
When renaming or solving technical debt, prepend the commit message with this: [Improvement]: *Your commit message

Introduction to programming in the project:
The whole project has a really strong focus on the performance, we need this to be able to make that the recomendation
system runs in the user's browser. This is because Utonoma wants to create a privacy based social network. This means
that we are not going to receive in a central server the information about the user's behavior, and we are not going 
to be able to implement a recomendation system. To avoid this, we plan to port a recomendation algorithm to run on 
the browser, allowing the user to watch content they are interested in, at the same time that we keep the privacy.
But we need to focus our application on performance to be able to do this.

State management
This is a multi-page application, keep this in mind when managing the state
as, if the user goes to other page and commes back, all will be restarted 


Styles:
Use BEM naming convention

Preferably, create classnames for layout related components or elements that later will have to be Responsive.
All the styles to personalize components that are not responsive can have inline styles

Responsive dessign
If you need to add a media query, then you can take the styles related to the possitioning and put'em in a class, then add the media query
using that class as the selector.

Assets:
For logos and simple shapes you can use svg.
For photos you can use jpg
In case of a complex image that require transparency you can use png

Naming:
When defining an id in an html document, first put the element type followed by the name that identifies it. Example:
"formUploadContent" "inputShortVideoDescription", "buttonUploadContent"

General:
Complex state management.
If a component got complex functionality where you have to transit between multiple states, you can use a reducer

Templates of objects for requests and responses.
To have common agreement in what to expect from an api we have a file in the services folder
that is named models, here you can place or consult what is contained in certain object that is 
used to upload data or request it.
These are defined as constructor functions and can be instantiated by using the new keyword and calling the function

Constructor function are writen in with initial upercase 

When creating a new page, don't forget to import index.css in the main file, at the level of the index.html

Global state.
As this is a MPA having a global state similar to redux makes no sense, as if the users changes to another page
all the previous state will be erased. 
So, for having a global state we are going to use the local storage in a 

Avoid creating multiple instances when conditionally importing
When conditionally creating a new component, you may endup in a situation in wich you will create a new instance of the component
everytime some condition is triggered, you don't want that, better reuse the same instance, you can do hoisting to be fancier.
Look at the next example:
if(!ConnectWallet) {
    var { ConnectWallet }  = await import('../ConnectWallet/ConnectWallet.js')
    ConnectWallet($connectWallet)
}
As you may see, if the previous code block is called multiple times, only one instance of the ConnectWallet component
will be created

Basic layout of the state management in the app:
1. State
2. Setters for the state
3. Effects for the setters of the state
4. Actions (set multiple variables in the state at the same time)
5. Effects for the actions (After setting multiple variables in the state using actions you can create an effect)